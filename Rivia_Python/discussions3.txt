Agenda:
    1. Q&A for previous material
    2. Discuss new tasks
    3. Review code from new tasks examples
    4. Hightlight OOP using Student Class
    
***************** Tasks *******************
Task 10. Write a program that asks the user for a file to analyze. Consider the exceptions that may arise
and handle them. Make sure to use type annotation for your variables and return types. Once you have
the file to read, examine the contents of the file and keep a count for each vowel found. Write the
results to a file called vowel_search_results.txt (in the same directory as your source code) so that the output appears like:

********* Vowel Search Report - /home/hessifer/source_file **********
---------------------------------------------------------------------
Unique Vowels Found: 5
Number of Times Vowels Appear in File: 45
A Count: 12
E Count: 4
I Count: 2
O Count: 12
U Count: 15

Task 11. Modify example 10 so that the file vowel_search_results.txt does not get overwritten. Insert a blank line before each new entry
in the file.

*********** Miles *********
def vowel_counter():
    vowels: List[str] = ['a', 'e', 'i', 'o', 'u']
    empty_vowel_count: List[str] = []
    unique_vowels = set()
    file: str = input(" Please enter in a file name: ")

    try:
        with open(file) as f:
            content = f.read()
        with open('practice.txt', 'w') as w:
            for letter in content:
                if letter in vowels:
                    unique_vowels.add(letter)
            print(f"Unique Vowels Found: {len(unique_vowels)}")

            for letter in content:
                if letter in vowels:
                    empty_vowel_count.append(letter)
            print(f"Number of Times Vowels Appear in File: {len(empty_vowel_count)}")

        a = empty_vowel_count.count('a')
        print(f"A count: {a}")
        e = empty_vowel_count.count('e')
        print(f"E count: {e}")
        i = empty_vowel_count.count('i')
        print(f"I count: {i}")
        o = empty_vowel_count.count('o')
        print(f"O count: {o}")
        u = empty_vowel_count.count('u')
        print(f"U count: {u}")

    except FileNotFoundError:
        print('Error File does not exist')


if __name__ == '__main__':
    vowel_counter()

******* Pat *********
"""
***************** Tasks *******************
Task 10. Write a program that asks the user for a file to analyze. Consider the exceptions that may arise
and handle them. Make sure to use type annotation for your variables and return types. Once you have
the file to read, examine the contents of the file and keep a count for each vowel found. Write the
results to a file called vowel_search_results.txt (in the same directory as your source code) so that the output appears like:

********* Vowel Search Report - /home/hessifer/source_file **********
---------------------------------------------------------------------
Unique Vowels Found: 5
Number of Times Vowels Appear in File: 45
A Count: 12
E Count: 4
I Count: 2
O Count: 12
U Count: 15
"""

def open_file(m: str) -> str:
    try:
        with open(m, 'r') as fh:
            return(fh.readlines())
    except FileNotFoundError:
        return("ERROR: file does not exist.")


def read_file():
    user_file = input("Please enter file to read: ")
    try:
        file_contents = open_file(user_file)
    except:
        print(f"There was an error trying to open {user_file}. Please re-run and try again.")
        sys.exit(1)
    all_vowel_count, uniq_vowels, vowels = count_vowels(file_contents)
    print_results(user_file, all_vowel_count, uniq_vowels, vowels)


def print_results(user_file: str, all_vowel_count: int, uniq_vowels: int, vowels: dict) -> str:
    title = f" Vowel Search Report - {user_file} "
    numask = 40 - (len(title) // 2)
    if numask <=0:
        numask = 0
    else:
        padding = '*' * numask
    with open('vowel_search_results.txt', 'w') as fh:
        full_title = f"{padding}{title}{padding}\n"
        fh.write(full_title)
        fh.write("-" * (len(full_title)-1))
        fh.write("\n")
        fh.write(f"Unique Vowels Found: {len(uniq_vowels)}\n")
        fh.write(f"Number of Times Vowels Appear in File: {all_vowel_count}\n")
        for vowel in vowels.keys():
            fh.write(f"{vowel.upper()}:\t{vowels[vowel]}\n")

    
def count_vowels(file_contents: str) -> str:
    all_vowel_count = 0
    uniq_vowels = set()
    vowels = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u':0 }
    for line in file_contents:
        for letter in line:
            if letter in vowels.keys():
                all_vowel_count += 1
                vowels[letter] += 1
                uniq_vowels.add(letter)
    
    return all_vowel_count, uniq_vowels, vowels

if __name__ == "__main__":
    read_file()





******************* Aleks ***************
 '''Task 10. Write a program that asks the user for a file to analyze. Consider the exceptions that may arise
  and handle them. Make sure to use type annotation for your variables and return types. Once you have
  the file to read, examine the contents of the file and keep a count for each vowel found. Write the
  results to a file called vowel_search_results.txt (in the same directory as your source code) so that the output     appears like:
  '''

  output_fmt = '''
  Unique Vowels Found: {}
  Number of Times Vowels Appear in File: {}
  A Count: {}
  E Count: {}
  I Count: {}
  O Count: {}
  U Count: {}
  '''


  def write_results(s: str, filename: str):
      try:
          with open(filename, "w") as f:
              f.write(s)
      except Exception as e:
          print(e)
          exit(2)


  def main():
      filename = input("Enter a filename:")
      str = ""
      try:
          with open(filename) as f:
              str = f.read().lower()
      except OSError:
          print("ERRROR: File does not exist.")
          exit(1)
      else:
          a = str.count('a')
          e = str.count('e')
          i = str.count('i')
          o = str.count('o')
          u = str.count('u')
          write_results(output_fmt.format(sum(map(bool, [a, e, i, o, i])),
                                          sum([a, e, i, o, u]),
                                          a, e, i, o, u),
                        "vowel_search_results.txt")


  if __name__ == "__main__":
      main()
~

*************** Charles *******************
"""
Write a program that asks the user for a file to analyze. Consider the exceptions that may arise
and handle them. Make sure to use type annotation for your variables and return types. Once you have
the file to read, examine the contents of the file and keep a count for each vowel found. Write the
results to a file called vowel_search_results.txt so that the output appears like:

********* Vowel Search Report - /home/hessifer/source_file **********
---------------------------------------------------------------------
Unique Vowels Found: 5
Number of Times Vowels Appear in File: 45
A Count: 12
E Count: 4
I Count: 2
O Count: 12
U Count: 15
"""


def main():
    """Main entry of program."""
    source_file: str = input("Please enter a file to analyze > ")
    data: str = ""

    try:
        with open(source_file) as fh:
            for line in fh.readlines():
                data += line
    except FileNotFoundError:
        print(f"ERROR: Could not locate file.")
 
    # process data
    write_report(get_vowel_stats(data), source_file)


def get_vowel_stats(file: str) -> dict:
    """Process a file to capture statistics on vowels."""
    results = dict()
    vowels = ('a', 'e', 'i', 'o', 'u')

    for line in file:
        for word in line.strip().lower().split(" "):
            for c in word:
                if c in vowels:
                    if c in results.keys():
                        results[c] += 1
                    else:
                        results[c] = 1
    return results


def write_report(results: dict, source_file: str, report_file="vowel_search_results.txt"):
    """Takes a results dict and writes the data to a file."""
    header_top = "{} Vowel Search Report - {} {}".format("*"*10, source_file, "*"*10)
    header_bottom = "{}".format("-" * len(header_top))
    unique_vowels_found = set(results.keys())
    total_vowels_found = sum(results.values())
    a_count = results.get('a')
    e_count = results.get('e')
    i_count = results.get('i')
    o_count = results.get('o')
    u_count = results.get('u')

    with open(report_file, 'w+') as fh:
        fh.write(header_top)
        fh.write("\n")
        fh.write(header_bottom)
        fh.write("\n")
        fh.write(f"Unique Vowels Found: {len(unique_vowels_found)}")
        fh.write("\n")
        fh.write(f"Number of Times Vowels Appear in File: {total_vowels_found}")
        fh.write("\n")
        fh.write(f"A Count: {a_count}")
        fh.write("\n")
        fh.write(f"E Count: {e_count}")
        fh.write("\n")
        fh.write(f"I Count: {i_count}")
        fh.write("\n")
        fh.write(f"O Count: {o_count}")
        fh.write("\n")
        fh.write(f"U Count: {u_count}")
        fh.write("\n")


if __name__ == '__main__':
    main()
    
    
***** Report File Contents *****
bash-3.2$ cat vowel_search_results.txt 
********** Vowel Search Report - /etc/hosts **********
------------------------------------------------------
Unique Vowels Found: 5
Number of Times Vowels Appear in File: 47
A Count: 11
E Count: 11
I Count: 6
O Count: 17
U Count: 2

************ Camilo ************
"""
Task10: Write a program that asks the user for a file to analyze.
Consider the exceptions that may arise and handle them.
Make sure to use type annotation for your variables and return types.
Once you have the file to read, examine the contents of the file and
keep a count for each vowel found. Write the results to a file called
vowel_search_results.txt so that the output appears like:


********* Vowel Search Report - /home/hessifer/source_file **********
---------------------------------------------------------------------
Unique Vowels Found: 5
Number of Times Vowels Appear in File: 45
A Count: 12
E Count: 4
I Count: 2
O Count: 12
U Count: 15

"""


def main():
    vowels = ['a', 'e', 'i', 'o', 'u']
    A_Character = 0
    E_Character = 0
    I_Character = 0
    O_Character = 0
    U_Character = 0
    unique_vowels = set()

    user_f: str = input("Enter file name: ")
    try:
        # with open("rivia.txt", "r") as user_file:
        with open(user_f, "r") as user_file:
            for line in user_file:
                for character in line:
                    if character in vowels[0]:
                        A_Character = A_Character + 1
                        unique_vowels.add(character)
                    if character in vowels[1]:
                        E_Character = E_Character + 1
                        unique_vowels.add(character)
                    if character in vowels[2]:
                        I_Character = I_Character + 1
                        unique_vowels.add(character)
                    if character in vowels[3]:
                        O_Character = O_Character + 1
                        unique_vowels.add(character)
                    if character in vowels[4]:
                        U_Character = U_Character + 1
                        unique_vowels.add(character)
    except FileNotFoundError as fe:
        print(f"Verify the name of the file - {fe}")
    else:
        unique = len(unique_vowels)
        Total_vowels = A_Character + E_Character + I_Character + O_Character + U_Character
        print(f"Unique Vowels Found: {unique}")
        print(f"Number of Times Vowels Appear in File: {Total_vowels}")
        print(f"A Count: {A_Character}")
        print(f"E Count: {E_Character}")
        print(f"I Count: {I_Character}")
        print(f"O Count: {O_Character}")
        print(f"U Count: {U_Character}")




if __name__ == '__main__':
    main()



